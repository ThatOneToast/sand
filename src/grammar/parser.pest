// -----------------------------------------------------------------------------
// File Structure
// -----------------------------------------------------------------------------
file                =  { SOI ~ (statements)* ~ EOI }
statements          = _{ function | variable | function_call | collection }
function_statements = _{ variable | function_call | if_statement | collection }
if_block_statements =  { if_statement | variable | function_call | collection }

// -----------------------------------------------------------------------------
// Basic Elements
// -----------------------------------------------------------------------------
WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* }

// -----------------------------------------------------------------------------
// Identifiers & Generic Types & Condtionals
// -----------------------------------------------------------------------------
identifier    = @{ ASCII_ALPHANUMERIC+ }
type_notation = @{ "String" | "Number" | "Boolean" }
value         =  { string_type | number_type | boolean_type | null_type }

string_type  = @{ ("`" ~ (!"`" ~ ANY)* ~ "`") | ("'" ~ (!"'" ~ ANY)* ~ "'") }
number_type  = @{ ("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
boolean_type = @{ "true" | "false" }
null_type    = @{ "null" }

variable = { "let" ~ identifier ~ "=" ~ value }

comparison_operator =  { ">" | "<" | "==" | "!=" | ">=" | "<=" }
comparison          =  { (value | identifier) ~ comparison_operator ~ (value | identifier) }
condition           = _{ comparison | boolean_type | identifier }

if_statement = { "if" ~ condition ~ if_block }
if_block     = { "{" ~ (if_block_statements)* ~ "}" }

// ------------------------------------------------------------------------------
// Functions & General Block Type Structure
// ------------------------------------------------------------------------------
function = { "fn" ~ identifier ~ "(" ~ params? ~ ")" ~ func_block }
params   = { param ~ ("," ~ param)* }
param    = { identifier ~ ":" ~ type_notation }

func_block = { "{" ~ (function_statements)* ~ "}" }

// ------------------------------------------------------------------------------
// Function Assignments & Values
// ------------------------------------------------------------------------------
function_call  = { "#" ~ identifier ~ "(" ~ passing_params? ~ ")" }
passing_params = { passing_param ~ ("," ~ passing_param)* }
passing_param  = { value }

// -----------------------------------------------------------------------------
// Collections
// -----------------------------------------------------------------------------
collection      = { "@#" ~ collection_id ~ ("." ~ collection_prop ~ ("=" ~ value)*)* }
collection_id   = { "entities" | ("advancements" | "achievements") }
collection_prop = { "null" }
